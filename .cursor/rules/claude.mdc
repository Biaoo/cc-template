---
alwaysApply: true
---
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Introduction

This project is a Python-based GWP (Global Warming Potential) validation system that helps users verify if their GWP values are reasonable by comparing them with similar materials from a database using semantic search and statistical analysis.

## Dependencies

Dependencies will be managed using UV (uv.lock file) when the project is initialized.
To add a new dependency, use `uv add <package-name>` instead of manually editing dependency files.

## Commands

Common commands will be available through UV scripts and can be found in pyproject.toml when the project is initialized.
Typical commands include:

- `uv run app` - Start the FastAPI server
- `uv run test` - Run tests with pytest
- `uv run ruff` - Run code linting
- `uv run black` - Format code
- `uv run mypy` - Run type checking

## Architecture

### Project Structure

- **`src/`** - Main application source code
  - **`src/core/`** - Core business logic and base classes
  - **`src/data/`** - Data management and database operations
  - **`src/search/`** - Search and similarity matching functionality
  - **`src/validation/`** - GWP validation algorithms and statistics
  - **`src/api/`** - FastAPI endpoints and request/response models
  - **`src/ui/`** - Gradio web interface
  - **`src/utils/`** - Utility functions and helpers
  - **`src/config/`** - Configuration management
- **`tests/`** - Test files (unit and integration tests)
- **`scripts/`** - Development and deployment scripts
- **`docker/`** - Docker configuration files
- **`docs/`** - Project documentation

### Key Tech Stack

- Python 3.10+
- UV (dependency management)
- FastAPI (REST API framework)
- Gradio (web interface)
- PostgreSQL (database)
- MinIO (object storage)
- PyTorch (ML operations)
- scikit-learn (statistical analysis)
- faiss-cpu (vector similarity search)
- pytest (testing)
- Docker (containerization)

## Memory & Progress Management

This section is for recording long-term project memory and tracking development progress. Claude Code should always refer to this section during development and update following the rules below.

### 1. Memory Documents

Memory documents are stored in the @spec/ directory.

project-root/
├── spec/
│ ├── requirements.md
│ ├── tech-design.md
│ ├── development-progress.md
│ ├── develop-logs/
│ └── ...

- @spec/requirements.md: Project requirements and design.
- @spec/tech-design.md: The technical design of the whole project and key functional modules.
- @spec/development-progress.md: The ongoing progress, completed tasks, and next steps.
- @spec/develop-logs/\*: Logs of development process, managed following the rules in @spec/development-progress.md.

### 2. How to Use & Maintain

- **Reference**: Before coding, answering questions, or making decisions, always check the above documents to ensure accuracy and consistency.
- **Update**: After implementing features, fixing bugs, or making key decisions, promptly update the relevant documents to keep project memory current and complete.
- **Progress Tracking**: The progress document should clearly list current version, major changes, next goals, and known issues for easy tracking and collaboration.
- **Logs Management**: The logs should be managed following the rules in @spec/development-progress.md.
- **Don't Change Content**: Do not change the parts marked (Don't Change) in the documents.

### Development Notes

- The project uses Python 3.10+ with UV for dependency management
- Code quality is maintained with black (formatting), ruff (linting), and mypy (type checking)
- pytest is used for testing with coverage reporting
- Git strategy and development workflow can be found in @spec/development-progress.md
- Follow the modular architecture with clear separation between data, search, validation, and API layers
- All database operations should go through the data management module
- Vector operations should use faiss for efficiency
- API responses must follow the standardized JSON format defined in requirements
- Use proper logging and error handling throughout the application

### Remote Code Execution

- The project code will run on a remote server. If you need to execute commands in the terminal, use `ssh -p <port> <username>@<host> <command>`.
- The remote project root path is `/app/`.
- Local project code and files are kept in sync with the remote server via SFTP, so you only need to modify local files when making changes.

#### Remote Host Information

- host: 192.168.8.8
- port: 31522
- username: root
- path: /app
